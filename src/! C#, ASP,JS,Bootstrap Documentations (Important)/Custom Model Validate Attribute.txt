# make Folder: CustomActionFilters>>ValidateModelAttribute.cs : ActionFilterAttribute


--------------------------------------------------------------------------------------------------
using System.ComponentModel.DataAnnotations;

namespace NZWalks.API.Models.DTO
{
    public class AddWalkDTO
    {
        [Required]
        [MaxLength(100)]
        public string Name { get; set; }

        [Required]
        [MaxLength(1000)]
        public string Description { get; set; }

        [Required]
        [Range(0, 50)]
        public double LengthInKm { get; set; }
        public string? WalkImgUrl { get; set; }

        [Required]
        public Guid DifficultyId { get; set; }
        [Required]
        public Guid RegionId { get; set; }
    }
}
--------------------------------------------------------------------------------------------------
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;

namespace NZWalks.API.CustomActionFilters
{
    public class ValidateModelAttribute : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext context)
        {
            if (context.ModelState.IsValid == false) 
            {
                context.Result = new BadRequestResult();
            }
        }
    }
}
--------------------------------------------------------------------------------------------------
[HttpPost]
[ValidateModel]
public async Task<IActionResult> Create([FromBody] AddRegionDTO addRegionDTO)
{
        // Map DTO to Domain Model
        var regionDomain = mapper.Map<Region>(addRegionDTO);

        // Use Domain Model to Create Region
        //await _dbContext.Regions.AddAsync(regionDomain);  // before Repository Pattern
        //await _dbContext.SaveChangesAsync();              // before Repository Pattern
        regionDomain = await regionRepository.CreateAsync(regionDomain);


        

        // Map Domain Model to DTO
        var regionDto = mapper.Map<RegionDTO>(regionDomain);

        return CreatedAtAction(nameof(GetById), new { id = regionDto.Id }, regionDto);   
}
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
































