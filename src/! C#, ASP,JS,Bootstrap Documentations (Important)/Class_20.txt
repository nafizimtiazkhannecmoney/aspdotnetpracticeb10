Look more websites, softwares, get more production software ideas
* ABP.IO(Its like Clean Architecture) ----15:08
16:33 left off
24:38--- Search Isnt working, you wave to write the whole thing
35: 28 -- Added Edit Update Button
1:25:16 -- Java Script Jquery Important(Manipulation, Selectors,Core)



--------------------------------------------------------------------------------[ProductRepository.cs]START
#[(x => x.ProductName.Contains (search.Value)]
using DevSkill.Inventory.Domain;
using DevSkill.Inventory.Domain.Entities;
using DevSkill.Inventory.Domain.Repsitory_Contracts;
using DevSkill.Inventory.Infrastructure.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DevSkill.Inventory.Infrastructutre.Repositories
{
    public class ProductRepository : Repository<Product, Guid>, IProductRepository
    {
        public ProductRepository(ProductDbCntext context) : base(context)
        {
                
        }

        public (IList<Product> data, int total, int totalDisplay) GetPagedProducts(int pageIndex, int pageSize,
            DataTablesSearch search, string? order)
        {
            if (string.IsNullOrWhiteSpace(search.Value))
                return GetDynamic(null , order, null, pageIndex, pageSize, true);
            else 
                return  GetDynamic(x => x.ProductName.Contains (search.Value), order, null, pageIndex, pageSize, true);
        }
    }
}
--------------------------------------------------------------------------------[ProductRepository.cs]END
# We need to add columndefs in the script datatables section

--------------------------------------------------------------------------------[productController.cs]START
#[We updated the Create codes] 
public IActionResult Create()
 {
     var model = new ProductCreateModel();
     return View(model);
 }

public IActionResult Update(Guid Id)
{
    var model = new ProductUpdateModel();
    Product product = _productManagementServices.GetProduct(Id);
    model.ProductName = product.ProductName;
    model.Id = product.Id;

    return View(model);
}

--------------------------------------------------------------------------------[productController.cs]END

# We will make a class in Model>>ProductUpdateModel.cs
--------------------------------------------------------------------------------[ProductUpdateModel.cs]START
namespace DevSkill.Inventory.Web.Areas.Admin.Models
{
    public class ProductUpdateModel
    {
        public Guid Id { get; set; }
        public string ProductName { get; set; }
    }
}

--------------------------------------------------------------------------------[ProductUpdateModel.cs]END


--------------------------------------------------------------------------------[ProductManagementServices]START
# Generate GetProduct method From [productController.cs]
# Go to definition of GetProduct
# DevSkill.Inventory.Application>>Services>>ProductManegementServices.cs
# Implement the newly added Interface

public Product GetProduct(Guid id)
{
    return _productUnitOfWork.ProductRepository.GetById(id);
}


--------------------------------------------------------------------------------[ProductManagementServices]END


# Now We add post method for Update() action in the controller
--------------------------------------------------------------------------------[productController.cs]START
# Copy the post method of Create(change Action name to Update, change model productupdatemodel)
# Generate Method UpdateProduct, implent it in the ProductManagementServices.cs


[HttpPost, ValidateAntiForgeryToken]
public IActionResult Update(ProductUpdateModel model)
{
    if (ModelState.IsValid)
    {
        var product = new Product { Id = model.Id, ProductName = model.ProductName };

        try
        {
            _productManagementServices.UpdateProduct(product);
            TempData.Put("ResponseMessage", new ResponseModel
            {
                Message = "Inventory Item Updated successfuly",
                Type = ResponseTypes.Success
            });
            return RedirectToAction("Index");
        }
        catch (Exception ex)
        {
            TempData.Put("ResponseMessage", new ResponseModel
            {
                Message = "Inventory Item Update failed",
                Type = ResponseTypes.Success
            });
            _logger.LogError(ex, "Inventory Item Update failed");
        }

    }
    return View();
}

--------------------------------------------------------------------------------[productController.cs]END



--------------------------------------------------------------------------------[ProductManagementServices.cs]START
# Implement interface
        public void UpdateProduct(Product product)
        {
            throw new NotImplementedException();
        }
--------------------------------------------------------------------------------[ProductManagementServices.cs]END



--------------------------------------------------------------------------------[ProductRepository.cs]START
namespace DevSkill.Inventory.Infrastructutre.Repositories
{
    public class ProductRepository : Repository<Product, Guid>, IProductRepository
    {
        public ProductRepository(ProductDbCntext context) : base(context)
        {
                
        }

        public bool IsTitleDuplicate(string productname, Guid? id = null)
        {
            if (id.HasValue)
            {
                return GetCount(x => x.Id != id.Value && x.ProductName == productname) > 0;
            }
            else
            {
                return GetCount(x => x.ProductName == productname) > 0;
            }
        }

        public (IList<Product> data, int total, int totalDisplay) GetPagedProducts(int pageIndex, int pageSize,
            DataTablesSearch search, string? order)
        {
            if (string.IsNullOrWhiteSpace(search.Value))
                return GetDynamic(null , order, null, pageIndex, pageSize, true);
            else 
                return  GetDynamic(x => x.ProductName.Contains (search.Value), order, null, pageIndex, pageSize, true);
        }
    }
}

--------------------------------------------------------------------------------[ProductRepository.cs]END

--------------------------------------------------------------------------------[IProductRepository]START
# Give the signature of IsTitleDuplicate in the interface
namespace DevSkill.Inventory.Domain.Repsitory_Contracts
{
    public interface IProductRepository : IRepositoryBase<Product, Guid>
    {
        public (IList<Product> data, int total, int totalDisplay) GetPagedProducts(int pageIndex, int pageSize,
            DataTablesSearch search, string? order);

        bool IsTitleDuplicate(string productname, Guid? id = null);
    }
}

--------------------------------------------------------------------------------[IProductRepository]END

--------------------------------------------------------------------------------[ProductManagementServices.cs]START
using DevSkill.Inventory.Domain;
using DevSkill.Inventory.Domain.Entities;

namespace DevSkill.Inventory.Application.Services
{
    public class ProductManagementServices : IProductManagementServices
    {
        private readonly IProductUnitOfWork _productUnitOfWork;

        public ProductManagementServices(IProductUnitOfWork productUnitOfWork)
        {
            _productUnitOfWork = productUnitOfWork;
        }
        //public void CreateProduct()
        //{

        //}

        public void CreateProduct(Product product)
        {
            if (!_productUnitOfWork.ProductRepository.IsTitleDuplicate(product.ProductName))
            {
                _productUnitOfWork.ProductRepository.Add(product);
                _productUnitOfWork.Save();
            }
        }

        public Product GetProduct(Guid id)
        {
            return _productUnitOfWork.ProductRepository.GetById(id);
        }

        public (IList<Product> data, int total, int totalDisplay) GetProducts(int pageIndex,
            int pageSize, DataTablesSearch search, string? order)
        {
           return _productUnitOfWork.ProductRepository.GetPagedProducts(pageIndex, pageSize, search, order);
        }

        public void UpdateProduct(Product product)
        {
            if (!_productUnitOfWork.ProductRepository.IsTitleDuplicate(product.ProductName, product.Id))
            {
                _productUnitOfWork.ProductRepository.Edit(product);
                _productUnitOfWork.Save();
            }
            else
                throw new InvalidOperationException("ProductName Should be unique");
        }
    }
}

--------------------------------------------------------------------------------[ProductManagementServices.cs]END

# Now We need to make view for Update Action[HttpPost] in ProductController.cs
# IActionResult Update>>Add View>>Razor View







--------------------------------------------------------------------------------[Update.cshtml]START
# Coppy the contents of Create.cshtml
@model ProductUpdateModel
@{
    ViewData["Title"] = "Create";
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Update Product</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Products</a></li>
                    <li class="breadcrumb-item active">Update  New </li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <!-- left column -->
            <div class="col-md-6">
                <!-- general form elements -->
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Update a Product</h3>
                    </div>
                    <!-- /.card-header -->
                    <!-- form start -->
                    <form asp-antiforgery="true" asp-area="Admin" asp-controller="Product" asp-action="Update" method="post">
                        <input type="hidden" asp-for="Id" />
                        <div class="card-body">
                            <div class="form-group">
                                <label asp-for="ProductName" />
                                <input type="text" asp-for="ProductName" class="form-control">
                            </div>
                        </div>
                        <!-- /.card-body -->

                        <div class="card-footer">
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    </form>
                </div>
                <!-- /.card -->
            </div>
            <!--/.col (left) -->

        </div>
        <!-- /.row -->
    </div><!-- /.container-fluid -->
</section>
<!-- /.content -->

--------------------------------------------------------------------------------[Update.cshtml]END
# Take <partial name="_ResponsePartial" /> from Index.cshtml and place it in Update.cshtml after form tag line 
# Also do this thing in Create.cshtml


--------------------------------------------------------------------------------[Index.cshtml]START
<script>
    $(function () {
        $("#blogposts").DataTable({
            processing: true,
            serverSide: true,
            responsive: true,
            lengthChange: true,
            autoWidth: false,
            lengthMenu: [
                [10, 25, 50, -1],
                [10, 25, 50, 'All']
            ],
            ajax: {
                url: "/Admin/Product/GerProductJsonData",
                type: "POST",
                contentType: "application/json", //must be added
                dataType: "json", //better to add, not mandatory
                data: function (d) {
                     d.SearchItem = {
                     };
                     return JSON.stringify(d);
                 },
            },
            columnDefs: [
                {
                    orderable: false,
                    targets: 1,  //It is 0 based index, Here 1 means we are targetting the 2nd column 
                    render: function (data, type, row) {
                        console.log(type);
                        return `<button type="submit" class="btn btn-info btn-sm" onclick="window.location.href='/admin/product/update/${data}'" value='${data}'>
                                                    <i class="fas fa-pencil-alt">
                                                    </i>
                                                    Edit
                                                </button>
                                                <button type="submit" class="btn btn-danger btn-sm show-bs-modal" data-id='${data}' value='${data}'>
                                                    <i class="fas fa-trash">
                                                    </i>
                                                    Delete
                                                </button>`;
                    }
                }
            ],
            //dom: 'Bfrtip',
            "buttons": ["copy", "csv", "excel", "pdf", "print", "colvis"]
        }).buttons().container().appendTo('#blogposts_wrapper .col-md-6:eq(0)');

        $('#blogposts').on('click', '.show-bs-modal', function (event) {
            let id = $(this).data("id");
            let modal = $("#modal-default");
            modal.find('.modal-body p').text('Are you sure you want to delete this record?');
            $("#deleteId").val(id);
            $("#deleteForm").attr("action", "/admin/product/delete");
            modal.modal('show');
        });
    });
</script>
--------------------------------------------------------------------------------[Index.cshtml]END


# Copy _ModalPartial.cshtml and paste it to shared folder
--------------------------------------------------------------------------------[_ModalPartial.cshtml]START
<div class="modal fade" id="modal-default">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Delete</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure, you want to delete?</p>
                <form id="deleteForm" action="" method="post" asp-antiforgery="true">
                    <input type="hidden" id="deleteId" value="" name="id" />
                </form>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" id="deleteButton" class="btn btn-danger">Yes, Delete!</button>
            </div>
        </div>
    </div>
</div>

--------------------------------------------------------------------------------[_ModalPartial.cshtml]END


--------------------------------------------------------------------------------[Index.cshtml]START
    <script>
        $(function () {
            $("#blogposts").DataTable({
                processing: true,
                serverSide: true,
                responsive: true,
                lengthChange: true,
                autoWidth: false,
                lengthMenu: [
                    [10, 25, 50, -1],
                    [10, 25, 50, 'All']
                ],
                ajax: {
                    url: "/Admin/Product/GerProductJsonData",
                    type: "POST",
                    contentType: "application/json", //must be added
                    dataType: "json", //better to add, not mandatory
                    data: function (d) {
                         d.SearchItem = {
                         };
                         return JSON.stringify(d);
                     },
                },
                columnDefs: [
                    {
                        orderable: false,
                        targets: 1,  //It is 0 based index, Here 1 means we are targetting the 2nd column 
                        render: function (data, type, row) {
                            console.log(type);
                            return `<button type="submit" class="btn btn-info btn-sm" onclick="window.location.href='/admin/product/update/${data}'" value='${data}'>
                                                        <i class="fas fa-pencil-alt">
                                                        </i>
                                                        Edit
                                                    </button>
                                                    <button type="submit" class="btn btn-danger btn-sm show-bs-modal" data-id='${data}' value='${data}'>
                                                        <i class="fas fa-trash">
                                                        </i>
                                                        Delete
                                                    </button>`;
                        }
                    }
                ],
                //dom: 'Bfrtip',
                "buttons": ["copy", "csv", "excel", "pdf", "print", "colvis"]
            }).buttons().container().appendTo('#blogposts_wrapper .col-md-6:eq(0)');

            $('#blogposts').on('click', '.show-bs-modal', function (event) {
                let id = $(this).data("id");
                let modal = $("#modal-default");
                modal.find('.modal-body p').text('Are you sure you want to delete this record?');
                $("#deleteId").val(id);
                $("#deleteForm").attr("action", "/admin/product/delete");
                modal.modal('show');
            });
            $("#deleteButton").click(function () {
                $("#deleteForm").submit();
            });
        });
    </script>
}
--------------------------------------------------------------------------------[Index.cshtml]END

# Now we need to add _ModalPartial.cshtml in the index.cshtml page in the same page as perevious partial placed
 <partial name="_ResponsePartial" />
 <partial name="_ModalPartial" />


--------------------------------------------------------------------------------[ProductController.cs]START
[HttpPost, ValidateAntiForgeryToken]
public IActionResult Delete(Guid Id)
{
    if (ModelState.IsValid)
    {
        try
        {
            _productManagementServices.DeleteProduct(Id);
            TempData.Put("ResponseMessage", new ResponseModel
            {
                Message = "Inventory Item Deleted successfuly",
                Type = ResponseTypes.Success
            });
            return RedirectToAction("Index");
        }
        catch (Exception ex)
        {
            TempData.Put("ResponseMessage", new ResponseModel
            {
                Message = "Inventory Item Delete failed",
                Type = ResponseTypes.Success
            });
            _logger.LogError(ex, "Inventory Item Update failed");
        }

    }
    return View();
}
--------------------------------------------------------------------------------[ProductController.cs]END

# Generate Method DeleteProduct

--------------------------------------------------------------------------------[Productmanagementservices.cs]START
# Implement the DeleteProduct method

 public void DeleteProduct(Guid id)
 {
     _productUnitOfWork.ProductRepository.Remove(id);
     _productUnitOfWork.Save();
 }
--------------------------------------------------------------------------------[Productmanagementservices.cs]END





Done 

Dom manipulation 1:50:00, start from here
Done Reviewing


--------------------------------------------------------------------------------[]START
--------------------------------------------------------------------------------[]END

--------------------------------------------------------------------------------[]START
--------------------------------------------------------------------------------[]END