
We Dont Need Any nuget for this

// GET: api/walks?filterOn=Name&filterQuery=<queryname>&sortBy=Name&isAscending=true

## We Will Apply Sorting on WalksController.cs in The GetAll() Function

## WalksController: 
public async Task<IActionResult> GetAll([FromQuery] string? filterOn, [FromQuery] string? filterQuery, [FromQuery] string? sortBy, [FromQuery] bool? isAscending)

## IWalkRepository:
// These two will be by default null, isAscending is Default to Ascending
Task<List<Walk>> GetAllAsync(string? filterOn = null, string? filterQuery = null, string? sortBy = null, bool isAscending = true); 

-----------------------------------------------------------------------------------------------------------------------------------
## SQLWalkRepository : IWalkRepository
-----------------------------------------------------------------------------------------------------------------------------------
 public async Task<List<Walk>> GetAllAsync(string? filterOn = null, string? filterQuery = null, string? sortBy = null, bool isAscending = true)
 {
     var walks = _dbContext.Walks.Include(d => d.Difficulty).Include(r => r.Region).AsQueryable();
     
     // Filtering
     if (string.IsNullOrWhiteSpace(filterOn) == false && string.IsNullOrWhiteSpace(filterQuery) == false)
     {
         if (filterOn.Equals("Name", StringComparison.OrdinalIgnoreCase))  // Check if it is in name column and ignore Uper or lower case.
         {
             walks = walks.Where(x => x.Name.Contains(filterQuery));
         }
     }

     // Sorting
     if (string.IsNullOrWhiteSpace(sortBy) == false)
     {
         if (sortBy.Equals("Name", StringComparison.OrdinalIgnoreCase))
         {
             walks = isAscending ?  walks.OrderBy(x => x.Name) : walks.OrderByDescending(x => x.Name);
         }
         else if (sortBy.Equals("LengthInKm", StringComparison.OrdinalIgnoreCase))
         {
             walks = isAscending ? walks.OrderBy(x => x.LengthInKm) : walks.OrderByDescending(x => x.LengthInKm);
         }
     }

     return await walks.ToListAsync();
 }
-----------------------------------------------------------------------------------------------------------------------------------
## WalksController : ControllerBase
-----------------------------------------------------------------------------------------------------------------------------------
[HttpGet]
public async Task<IActionResult> GetAll([FromQuery] string? filterOn, [FromQuery] string? filterQuery, [FromQuery] string? sortBy, [FromQuery] bool? isAscending)
{
    var walkDomainModel = await walkRepository.GetAllAsync(filterOn, filterQuery, sortBy, isAscending ?? true); // If its nullable then change it to true

    // Map Domain Model To DTO
    var walkDTO = mapper.Map<List<WalkDTO>>(walkDomainModel);

    return Ok(walkDTO);
}
-----------------------------------------------------------------------------------------------------------------------------------

























































