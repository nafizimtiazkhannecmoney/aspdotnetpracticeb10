


 1*** Make ImagesController.cs (API Controller)

  Method will call a repository from API Controller, and the repository will call api coudinari and it will upload the images to the cloud
  and we will get an url in return

-------------------------------------------------------------------------------------------------------------------------
ImagesController.cs
-------------------------------------------------------------------------------------------------------------------------
namespace Bloggie.Web.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ImagesController : ControllerBase
    {
        [HttpPost]
        public async Task<IActionResult> UploadAsync(IFormFile file)
        {

        }
    }
}
-------------------------------------------------------------------------------------------------------------------------
  
 2### Then Make a Repository
-------------------------------------------------------------------------------------------------------------------------
Interface and the Implementation
-------------------------------------------------------------------------------------------------------------------------
namespace Bloggie.Web.Repositories
{
    public interface IImageRepository
    {
        Task<string> UploadAsync(IFormFile file);
    }
}

namespace Bloggie.Web.Repositories
{
    public class CloudinaryImageRepository : IImageRepository
    {
        public Task<string> UploadAsync(IFormFile file)
        {
            throw new NotImplementedException();
        }
    }
}
------------------------------------------------------------------------------------------------------------------------- 

  3### Register to the Cloudinary (Signup) : https://cloudinary.com/users/register_free

  4### Install Packages
	-> CloudinaryDotNet


  5### Get the API Key and API Secret From the Settings-> API Keys

  6### appsettings for Cloudinary
------------------------------------------------------------------------------------------------------------------------- 
appsettings.json
------------------------------------------------------------------------------------------------------------------------- 
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
    "AllowedHosts": "*",
    "ConnectionStrings": {
        "BloggieDbConnectionString": "Server=DESKTOP-63UE644\\SQLEXPRESS;Database=BloggieDb;Trusted_Connection=True;TrustServerCertificate=Yes"
    },
    "Cloudinary": {
        "CloudName": "",
        "ApiKey": "",
        "ApiSecret": ""
    }
}
------------------------------------------------------------------------------------------------------------------------- 

  7### Now fill CloudName, ApiKey, ApiSecret from cloudinary account
        "CloudName": "dlgmzq5e6",
        "ApiKey": "961783432477875",
        "ApiSecret": "78UKeZxca1ttQToQomqzChKhZ0I"


  8### Now Access the keys from CloudinaryImageRepository by injecting IConfiguration in the constructor
------------------------------------------------------------------------------------------------------------------------- 
CloudinaryImageRepository.cs
------------------------------------------------------------------------------------------------------------------------- 
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;

namespace Bloggie.Web.Repositories
{
    public class CloudinaryImageRepository : IImageRepository
    {
        private readonly IConfiguration _configuration;
        private readonly Account account;

        public CloudinaryImageRepository(IConfiguration configuration)
        {
            this._configuration = configuration;
            account = new Account(
                _configuration.GetSection("Cloudinary")["CloudName"],
                _configuration.GetSection("Cloudinary")["ApiKey"],
                _configuration.GetSection("Cloudinary")["ApiSecret"]
                );
        }
        public async Task<string> UploadAsync(IFormFile file)
        {
            var client = new Cloudinary(account);
            var uploadParams = new ImageUploadParams()
            {
                File = new FileDescription(file.FileName, file.OpenReadStream()),
                DisplayName = file.FileName
            };

            var uploadResult = await client.UploadAsync(uploadParams);

            if(uploadResult != null && uploadResult.StatusCode == System.Net.HttpStatusCode.OK)
            {
                return uploadResult.SecureUrl.ToString();
            }

            return null;
        }
    }
}
------------------------------------------------------------------------------------------------------------------------- 

  9### Inject The IImagesRepository in the Program.cs
------------------------------------------------------------------------------------------------------------------------- 
builder.Services.AddScoped<IImageRepository, CloudinaryImageRepository>();    //   Registering the CloudinaryImageRepository with the DI container
------------------------------------------------------------------------------------------------------------------------- 

 10### ImagesController (Injecting the CloudinaryImageRepository and upload function )
------------------------------------------------------------------------------------------------------------------------- 
ImagesController
------------------------------------------------------------------------------------------------------------------------- 
 using System.Net;
using Bloggie.Web.Repositories;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace Bloggie.Web.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ImagesController : ControllerBase
    {
        private readonly IImageRepository _imageRepository;

        public ImagesController(IImageRepository imageRepository)
        {
            this._imageRepository = imageRepository;
        }
        [HttpPost]
        public async Task<IActionResult> UploadAsync(IFormFile file)
        {
            var imageURL = await _imageRepository.UploadAsync(file);

            if (imageURL != null) 
            {
                return Problem("Something Went Wrong!", null, (int)HttpStatusCode.InternalServerError); 
            }

            return new JsonResult(new { link = imageURL });
        }
    }
}

------------------------------------------------------------------------------------------------------------------------- 


  11### Upload an Image from |{baseurl}/api/images| using postman then  Go To Media Library to check the image has been uploaded

Media Library: https://console.cloudinary.com/console/c-e28d13aaf425399d3c978ae0182509/media_library/search?q=&view_mode=list


 12### In the Add.cshtml we will write js and add some divs to upload image then paste the url in the imageurl input and show the image automatically

------------------------------------------------------------------------------------------------------------------------- 
Add.cshtml (added functionality to upload image paste in input field and show iamgeDisplay)
------------------------------------------------------------------------------------------------------------------------- 
@model Bloggie.Web.Models.ViewModels.AddBlogPostRequest

<div class="bg-secondary bg-opacity-10 py-2">
    <div class="container">
        <h1>Add BlogPost - Admin Functionality</h1>
    </div>
</div>

<div class="container py-5">
    <form method="post">
        <div class="mb-3">
            <label class="form-label">Heading</label>
            <input id="heading" class="form-control" type="text"  asp-for="Heading" />
        </div>

        <div class="mb-3">
            <label class="form-label">Page Title</label>
            <input id="pageTitle" class="form-control" type="text"  asp-for="PageTitle" />
        </div>

        <div class="mb3">
            <label class="form-label">Content</label>
            <textarea class="form-control" id="content" asp-for="Content"></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">Short Description</label>
            <input id="shortDescription" class="form-control" type="text"  asp-for="ShortDescription" />
        </div>

        <div class="mb-3">
            <label class="form-label">Featured Image Upload</label>
            <input type="file" id="featuredImageUpload" class="form-control" />
            <img src="" id="featuredImgDisplay" style="display:none; width:300px;" />
        </div>

        
        
        <div class="mb-3">
            <label class="form-label">Featured Image URL</label>
            <input id="featuredImageUrl" class="form-control" type="text"  asp-for="FeaturedImageUrl" />
        </div>

        <div class="mb-3">
            <label class="form-label">URL Handle</label>
            <input id="urlHandle" class="form-control" type="text"  asp-for="UrlHandle" />
        </div>

        <div class="mb-3">
            <label class="form-label">Pulished Date</label>
            <input id="publishedDate" class="form-control" type="date"  asp-for="PublishedDate" />
        </div>

        <div class="mb-3">
            <label class="form-label">Author</label>
            <input id="Author" class="form-control" type="text"  asp-for="Author" />
        </div>

        <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" id="visible" asp-for="Visible">
            <label class="form-check-label">Is Visible?</label>
        </div>

        <div class="mb-3">
            <label class="form-label">Tag</label>
            <select class="form-select" 
                    asp-items="@Model.Tags" 
                    asp-for="SelectedTags">
            </select>
        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-dark">Save BlogPost</button>
        </div>
    </form>
</div>

@section Scripts{
    <script>
        var editor = new FroalaEditor('#content');

        const featuredUploadElement = document.getElementById('featuredImageUpload');
        const featuredImageUrlElement = document.getElementById('featuredImageUrl');
        const feturedImgDisplayElement = document.getElementById('featuredImgDisplay');

        async function uploadFeaturedImage(e){
            console.log(e.target.files[0]);

            let data = new FormData();
            data.append('file', e.target.files[0]);

            await fetch('/api/images',{
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                },
                body: data
            }).then(response => response.json())
                .then(result => {
                    featuredImageUrlElement.value = result.link;
                    feturedImgDisplayElement.src = result.link;
                    feturedImgDisplayElement.style.display = 'block';
                });
        }

        featuredUploadElement.addEventListener('change', uploadFeaturedImage);
    </script>
}

------------------------------------------------------------------------------------------------------------------------- 


 13### give The Correct Featured URL And Update it 
	https://res.cloudinary.com/dlgmzq5e6/image/upload/v1741165348/pqg8ch1oaebamwaspkyp.jpg


-------------------------------------------------------------------------------------------------------------------------
Edit.cshtml (Now We do the same thing for the edit page, same javascript, but in the image an if condition if feturedURL is null then show none)
------------------------------------------------------------------------------------------------------------------------- 
@model Bloggie.Web.Models.ViewModels.EditBlogPostRequest

@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<div class="bg-secondary bg-opacity-10 py-2">
    <div class="container">
        <h1>All BlogPosts - Admin Functionality</h1>
    </div>
</div>

<div class="container py-5">
        @if(Model != null)
        {
            <form method="post">
                <div class="mb-3">
                    <label class="form-label">Id</label>
                    <input id="id" class="form-control" type="text"  asp-for="Id" readonly />
                </div>

                <div class="mb-3">
                    <label class="form-label">Heading</label>
                    <input id="heading" class="form-control" type="text"  asp-for="Heading" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Page Title</label>
                    <input id="pageTitle" class="form-control" type="text"  asp-for="PageTitle" />
                </div>

                <div class="mb3">
                    <label class="form-label">Content</label>
                    <textarea class="form-control" id="content" asp-for="Content"></textarea>
                </div>

                <div class="mb-3">
                    <label class="form-label">Short Description</label>
                    <input id="shortDescription" class="form-control" type="text"  asp-for="ShortDescription" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Featured Image Upload</label>
                    <input type="file" id="featuredImageUpload" class="form-control" />
                    @if (Model.FeaturedImageUrl != null)
                        {
                            <img src="@Model.FeaturedImageUrl" id="featuredImgDisplay" style="display:block; width:300px;" />
                        }
                    else
                        {
                            <img src="" id="featuredImgDisplay" style="display:none; width:300px;" />
                        }
                </div>

                <div class="mb-3">
                    <label class="form-label">Featured Image URL</label>
                    <input id="featuredImageUrl" class="form-control" type="text"  asp-for="FeaturedImageUrl" />
                </div>

                <div class="mb-3">
                    <label class="form-label">URL Handle</label>
                    <input id="urlHandle" class="form-control" type="text"  asp-for="UrlHandle" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Pulished Date</label>
                    <input id="publishedDate" class="form-control" type="date"  asp-for="PublishedDate" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Author</label>
                    <input id="Author" class="form-control" type="text"  asp-for="Author" />
                </div>

                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" id="visible" asp-for="Visible">
                    <label class="form-check-label">Is Visible?</label>
                </div>

                <div class="mb-3">
                    <label class="form-label">Tag</label>
                    <select class="form-select"
                            asp-items="@Model.Tags"
                            asp-for="SelectedTags">
                    </select>
                </div>

                <div class="mb-3 d-flex">
                    <button type="submit" class="btn btn-dark">Update</button>
                    <button type="submit" class="btn btn-danger ms-2" asp-area="" asp-controller="AdminBlogPosts" asp-action="Delete">Delete</button>
                </div>



            </form>
        }
        else
        {
            <p>No Blog Post Found!</p>
        }
       
</div>

@section Scripts {
    <script>
        var editor = new FroalaEditor('#content');

        const featuredUploadElement = document.getElementById('featuredImageUpload');
        const featuredImageUrlElement = document.getElementById('featuredImageUrl');
        const feturedImgDisplayElement = document.getElementById('featuredImgDisplay');

        async function uploadFeaturedImage(e){
            console.log(e.target.files[0]);

            let data = new FormData();
            data.append('file', e.target.files[0]);

            await fetch('/api/images',{
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                },
                body: data
            }).then(response => response.json())
                .then(result => {
                    featuredImageUrlElement.value = result.link;
                    feturedImgDisplayElement.src = result.link;
                    feturedImgDisplayElement.style.display = 'block';
                });
        }

        featuredUploadElement.addEventListener('change', uploadFeaturedImage);
    </script>
}
------------------------------------------------------------------------------------------------------------------------- 

 14### Now we add a fucnction to upload image in the wysiwyg editor in the content field
-------------------------------------------------------------------------------------------------------------------------
Add.cshtml
-------------------------------------------------------------------------------------------------------------------------
@section Scripts {
    <script>
        var editor = new FroalaEditor('#content',{
            imageUploadURL: '/api/images'
        });

        const featuredUploadElement = document.getElementById('featuredImageUpload');
        const featuredImageUrlElement = document.getElementById('featuredImageUrl');
        const feturedImgDisplayElement = document.getElementById('featuredImgDisplay');

        async function uploadFeaturedImage(e){
            console.log(e.target.files[0]);

            let data = new FormData();
            data.append('file', e.target.files[0]);

            await fetch('/api/images',{
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                },
                body: data
            }).then(response => response.json())
                .then(result => {
                    featuredImageUrlElement.value = result.link;
                    feturedImgDisplayElement.src = result.link;
                    feturedImgDisplayElement.style.display = 'block';
                });
        }

        featuredUploadElement.addEventListener('change', uploadFeaturedImage);
    </script>
}

-------------------------------------------------------------------------------------------------------------------------

  15### We Do the same thing for the Edit Page as well for the froala to upload image in the content input section 
-------------------------------------------------------------------------------------------------------------------------
Edit.cshtml
-------------------------------------------------------------------------------------------------------------------------
@section Scripts {
    <script>
        var editor = new FroalaEditor('#content',{
            imageUploadURL: '/api/images'
        });

        const featuredUploadElement = document.getElementById('featuredImageUpload');
        const featuredImageUrlElement = document.getElementById('featuredImageUrl');
        const feturedImgDisplayElement = document.getElementById('featuredImgDisplay');

        async function uploadFeaturedImage(e){
            console.log(e.target.files[0]);

            let data = new FormData();
            data.append('file', e.target.files[0]);

            await fetch('/api/images',{
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                },
                body: data
            }).then(response => response.json())
                .then(result => {
                    featuredImageUrlElement.value = result.link;
                    feturedImgDisplayElement.src = result.link;
                    feturedImgDisplayElement.style.display = 'block';
                });
        }

        featuredUploadElement.addEventListener('change', uploadFeaturedImage);
    </script>
}
-------------------------------------------------------------------------------------------------------------------------



  *** Done


































