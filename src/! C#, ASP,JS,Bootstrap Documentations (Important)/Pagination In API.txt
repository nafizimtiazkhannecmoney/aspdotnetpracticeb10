
### No Nuget Packages Need For Pagination
// GET: api/walks
// GET: api/walks?filterOn=Name&filterQuery=<queryname>&sortBy=Name&isAscending=true$pageNumber=1&pageSize=10
------------------------------------------------------------------------------------------------------------------------------------------------
## WalksController : ControllerBase
------------------------------------------------------------------------------------------------------------------------------------------------
public async Task<IActionResult> GetAll([FromQuery] string? filterOn, [FromQuery] string? filterQuery, 
    [FromQuery] string? sortBy, [FromQuery] bool? isAscending,
    [FromQuery] int pageNumber = 1, [FromQuery] int pageSize = 1000)
{
    var walkDomainModel = await walkRepository.GetAllAsync(filterOn, filterQuery, sortBy, isAscending ?? true); // If its nullable then change it to true

    // Map Domain Model To DTO
    var walkDTO = mapper.Map<List<WalkDTO>>(walkDomainModel);

    return Ok(walkDTO);
}
------------------------------------------------------------------------------------------------------------------------------------------------
## IWalkRepository
------------------------------------------------------------------------------------------------------------------------------------------------
 Task<List<Walk>> GetAllAsync(string? filterOn = null, string? filterQuery = null,
     string? sortBy = null, bool isAscending = true, int pageNumber = 1, int pageSize = 1000); 
------------------------------------------------------------------------------------------------------------------------------------------------
## SQLWalkRepository : IWalkRepository  (not done)
------------------------------------------------------------------------------------------------------------------------------------------------
 public async Task<List<Walk>> GetAllAsync(string? filterOn = null, string? filterQuery = null, 
    string? sortBy = null, bool isAscending = true, int pageNumber = 1, int pageSize = 1000)
{
    var walks = _dbContext.Walks.Include(d => d.Difficulty).Include(r => r.Region).AsQueryable();
    
    // Filtering
    if (string.IsNullOrWhiteSpace(filterOn) == false && string.IsNullOrWhiteSpace(filterQuery) == false)
    {
        if (filterOn.Equals("Name", StringComparison.OrdinalIgnoreCase))  // Check if it is in name column and ignore Uper or lower case.
        {
            walks = walks.Where(x => x.Name.Contains(filterQuery));
        }
    }

    // Sorting
    if (string.IsNullOrWhiteSpace(sortBy) == false)
    {
        if (sortBy.Equals("Name", StringComparison.OrdinalIgnoreCase))
        {
            walks = isAscending ?  walks.OrderBy(x => x.Name) : walks.OrderByDescending(x => x.Name);
        }
        else if (sortBy.Equals("LengthInKm", StringComparison.OrdinalIgnoreCase))
        {
            walks = isAscending ? walks.OrderBy(x => x.LengthInKm) : walks.OrderByDescending(x => x.LengthInKm);
        }
    }

    // Pagination
    var skipResults = (pageNumber - 1) *pageSize;
    return await walks.Skip(skipResults).Take(pageSize).ToListAsync();
}
------------------------------------------------------------------------------------------------------------------------------------------------
## WalksController : ControllerBase
------------------------------------------------------------------------------------------------------------------------------------------------
[HttpGet]
public async Task<IActionResult> GetAll([FromQuery] string? filterOn, [FromQuery] string? filterQuery, 
    [FromQuery] string? sortBy, [FromQuery] bool? isAscending,
    [FromQuery] int pageNumber = 1, [FromQuery] int pageSize = 1000)
{
    var walkDomainModel = await walkRepository.GetAllAsync(filterOn, filterQuery, sortBy,
        isAscending ?? true, pageNumber, pageSize); // If its nullable then change it to true

    // Map Domain Model To DTO
    var walkDTO = mapper.Map<List<WalkDTO>>(walkDomainModel);

    return Ok(walkDTO);
}
------------------------------------------------------------------------------------------------------------------------------------------------


### The main Formula for Pagination
    // Pagination
    var skipResults = (pageNumber - 1) *pageSize;
    return await walks.Skip(skipResults).Take(pageSize).ToListAsync();

















































