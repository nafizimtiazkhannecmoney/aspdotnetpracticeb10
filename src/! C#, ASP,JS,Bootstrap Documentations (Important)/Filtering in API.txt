
## We Dont need any Nuget For this

We will apply Filter on GetAll() Method on WalksController.cs

# // GET: api/walks?filterOn=Name&filterQuery=<queryname>

###filterOn = What column You want to Filter

### Need To add Some Query Strings In GetAll() Function (From WalksController)

###  public async Task<IActionResult> GetAll([FromQuery] string? filterOn, [FromQuery] string? filterQuery)

### IWalkRepository : Task<List<Walk>> GetAllAsync(string? filterOn = null, string? filterQuery = null); // These two will be by default null

------------------------------------------------------------------------------------------------------------
### SQLWalkRepository: public async Task<List<Walk>> GetAllAsync(string? filterOn = null, string? filterQuery = null)

 public async Task<List<Walk>> GetAllAsync(string? filterOn = null, string? filterQuery = null)
 {
     var walks = _dbContext.Walks.Include(d => d.Difficulty).Include(r => r.Region).AsQueryable();
     
     // Filtering
     if (string.IsNullOrWhiteSpace(filterOn) == false && string.IsNullOrWhiteSpace(filterQuery) == false)
     {
         if (filterOn.Equals("Name", StringComparison.OrdinalIgnoreCase))  // Check if it is in name column and ignore Uper or lower case.
         {
             walks = walks.Where(x => x.Name.Contains(filterQuery));
         }
     }
     return await walks.ToListAsync();
 }
------------------------------------------------------------------------------------------------------------
Walks Controller
------------------------------------------------------------------------------------------------------------
public async Task<IActionResult> GetAll([FromQuery] string? filterOn, [FromQuery] string? filterQuery)
{
    var walkDomainModel = await walkRepository.GetAllAsync(filterOn, filterQuery);

    // Map Domain Model To DTO
    var walkDTO = mapper.Map<List<WalkDTO>>(walkDomainModel);

    return Ok(walkDTO);
}
------------------------------------------------------------------------------------------------------------












































